@model Pasteleria.Models.Objetos.OpcionObj

@{
    ViewBag.Title = "ActualizaOpcion";
}

@using (Html.BeginForm("EditaOpcion", "Opcion", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <br />
        <h2>Actualizar opcion existente</h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <label class="control-label col-md-2">ID de Opcion</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.OpcionId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.OpcionId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Categoria de Opcion</label>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CategoriaId, ViewBag.ComboCategorias as List<SelectListItem>, new { @class = "form-control", @id = "categorias" })
                @Html.ValidationMessageFor(model => model.CategoriaId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Precio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Precio, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return numbersOnly(event)", @required = "required" } })
                @Html.ValidationMessageFor(model => model.Precio, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Habilitado</label>
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Estado)
                    @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="row">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Actualizar" class="btn btn-dark" />
                    @Html.ActionLink("Regresar", "OpcionesLista", null, new { @class = "btn btn-warning" })
                </div>

            </div>
        </div>
    </div>
}
<script type="text/javascript">

    function numbersOnly(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

</script>

